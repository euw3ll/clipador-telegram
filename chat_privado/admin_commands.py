import logging
import asyncio
from telegram import Update, error as telegram_error
from telegram.ext import ContextTypes
from typing import Optional

from core.database import (
    is_usuario_admin,
    resetar_estado_usuario_para_teste,
    buscar_configuracao_canal,
    deletar_configuracao_canal,
    marcar_configuracao_completa,
    buscar_usuario_por_id,
    buscar_usuario_por_email,
    conceder_plano_usuario,
    adicionar_slot_extra,
    remover_slots_extras,
    buscar_ids_assinantes_ativos,
    obter_estatisticas_gerais,
    atualizar_streamers_monitorados,
)
from core.telethon_criar_canal import (
    deletar_canal_telegram,
    obter_detalhes_canal,
    adicionar_usuario_ao_canal,
    remover_usuario_do_canal
)
from configuracoes import TELEGRAM_CHAT_ID
from datetime import datetime

logger = logging.getLogger(__name__)

def _parse_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """Extrai o user_id dos argumentos do comando."""
    if not context.args:
        update.message.reply_text("‚ùå Por favor, forne√ßa o ID do usu√°rio. Ex: /comando 123456789 ou /comando me")
        return None
    
    identifier = context.args[0]
    if identifier.lower() == 'me':
        return update.effective_user.id

    try:
        return int(identifier)
    except (ValueError, IndexError):
        update.message.reply_text("‚ùå ID de usu√°rio inv√°lido.")
        return None

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Exibe o menu de ajuda para administradores."""
    if not is_usuario_admin(update.effective_user.id):
        return
    
    texto = (
        "üõ†Ô∏è *Painel de Administrador*\n\n"
        "üìä *Estat√≠sticas e Comunica√ß√£o*\n"
        "`/stats` - V√™ as estat√≠sticas gerais do bot.\n"
        "`/channelstats <id | me | gratuito>` - V√™ stats de um canal.\n"
        "`/broadcast <mensagem>` - Envia mensagem para todos.\n"
        "`/message <id | me> <mensagem>` - Envia msg privada.\n\n"
        "üë§ *Gerenciamento de Usu√°rios*\n"
        "`/userinfo <id | me | email>` - V√™ resumo do usu√°rio.\n"
        "`/setplan <id | me> <Plano> [dias]` - Define um plano.\n"
        "_(Planos: Mensal Solo, Mensal Plus, Anual Pro, SUPER, PARCEIRO)_\n"
        "`/addslot <id | me> [quantidade]` - Adiciona um ou mais slots extras.\n"
        "`/removeslots <id | me>` - Remove todos os slots extras.\n"
        "`/resetuser <id | me>` - Apaga TODOS os dados do usu√°rio.\n\n"
        "üì∫ *Gerenciamento de Canais*\n"
        "`/setstreamers <id | me> <s1>...` - Altera a lista de streamers.\n"
        "`/createchannel <id | me>` - Verifica se um usu√°rio pode criar um canal.\n"
        "`/delchannel <id | me>` - Apaga o canal de um usu√°rio e reseta a config.\n"
        "`/channelmembers <add|remove> <owner_id|me> <target_id|me>` - Gerencia membros.\n"
    )
    await update.message.reply_text(texto, parse_mode="Markdown")

async def reset_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reseta completamente um usu√°rio para testes."""
    if not is_usuario_admin(update.effective_user.id):
        return
    
    user_id = _parse_user_id(update, context)
    if not user_id:
        return

    await update.message.reply_text(f"‚ö†Ô∏è ATEN√á√ÉO: Isso apagar√° TODOS os dados do usu√°rio `{user_id}`. Aguarde...")
    try:
        await resetar_estado_usuario_para_teste(user_id)
        await update.message.reply_text(f"‚úÖ Usu√°rio `{user_id}` resetado com sucesso.")
    except Exception as e:
        logger.error(f"Erro ao resetar usu√°rio {user_id}: {e}")
        await update.message.reply_text(f"‚ùå Erro ao resetar usu√°rio: {e}")

async def create_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verifica se um usu√°rio pode criar um canal."""
    if not is_usuario_admin(update.effective_user.id):
        return

    user_id = _parse_user_id(update, context)
    if not user_id:
        return

    # 1. Verificar se o usu√°rio tem plano ativo
    usuario = buscar_usuario_por_id(user_id)
    if not usuario or usuario.get('nivel') != 2:
        await update.message.reply_text(f"‚ùå N√£o √© poss√≠vel criar o canal. O usu√°rio `{user_id}` n√£o √© um assinante ativo.")
        return

    # 2. Verificar se j√° n√£o existe um canal
    config = buscar_configuracao_canal(user_id)
    if config and config.get('id_canal_telegram'):
        await update.message.reply_text(f"‚ùå O usu√°rio `{user_id}` j√° possui um canal configurado.")
        return

    await update.message.reply_text(
        f"‚úÖ Verifica√ß√£o bem-sucedida. O usu√°rio `{user_id}` √© um assinante ativo e n√£o possui um canal.\n\n"
        "Pe√ßa para que ele use o comando /start para iniciar a configura√ß√£o."
    )

async def delete_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Apaga o canal de um usu√°rio e reseta seu status de configura√ß√£o."""
    if not is_usuario_admin(update.effective_user.id):
        return

    user_id = _parse_user_id(update, context)
    if not user_id:
        return

    await update.message.reply_text(f"‚è≥ Apagando canal e resetando configura√ß√£o para o usu√°rio `{user_id}`. Aguarde...")

    try:
        config = buscar_configuracao_canal(user_id)
        if config and config.get('id_canal_telegram'):
            id_canal = int(config['id_canal_telegram'])
            await deletar_canal_telegram(id_canal)
            logger.info(f"Canal {id_canal} do usu√°rio {user_id} deletado via admin.")
        
        # Reseta o estado de configura√ß√£o no banco de dados
        deletar_configuracao_canal(user_id)
        marcar_configuracao_completa(user_id, False)

        await update.message.reply_text(f"‚úÖ Canal do usu√°rio `{user_id}` removido e configura√ß√£o resetada. Ele pode usar /start para configurar novamente.")

    except Exception as e:
        logger.error(f"Erro ao deletar canal para o usu√°rio {user_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao deletar o canal: {e}")

async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Exibe um resumo completo dos dados de um usu√°rio."""
    if not is_usuario_admin(update.effective_user.id): return

    if not context.args:
        await update.message.reply_text("‚ùå Uso: `/userinfo <id | email>`")
        return

    identifier = context.args[0]
    usuario = None
    user_id = None

    if identifier.isdigit():
        user_id = int(identifier)
        usuario = buscar_usuario_por_id(user_id)
    else:
        usuario = buscar_usuario_por_email(identifier)
        if usuario:
            user_id = usuario['telegram_id']

    if not usuario:
        await update.message.reply_text(f"‚ùå Usu√°rio com identificador `{identifier}` n√£o encontrado em nosso banco de dados.")
        return

    config = buscar_configuracao_canal(user_id)

    info = [f"‚ÑπÔ∏è *Informa√ß√µes do Usu√°rio: `{user_id}`*"]
    info.append(f"üë§ *Nome:* {usuario.get('nome', 'N/A')}")
    info.append(f"üìß *Email:* `{usuario.get('email', 'N/A')}`")
    info.append(f"üì¶ *Plano:* {usuario.get('plano_assinado', 'Nenhum')}")
    
    data_exp_str = usuario.get('data_expiracao')
    data_exp_fmt = datetime.fromisoformat(data_exp_str).strftime('%d/%m/%Y %H:%M') if data_exp_str else "N/A"
    info.append(f"üóìÔ∏è *Expira em:* {data_exp_fmt}")

    if config:
        id_canal = config.get('id_canal_telegram')
        info.append(f"üì∫ *Canal:* {'Criado (`' + str(id_canal) + '`)' if id_canal else 'N√£o criado'}")
        info.append("\n*--- Configura√ß√£o do Canal ---*")
        info.append(f"üß† *Modo:* `{config.get('modo_monitoramento', 'N/A')}`")
        streamers = [s for s in config.get('streamers_monitorados', '').split(',') if s]
        num_streamers = len(streamers)
        info.append(f"üé∞ *Slots:* {num_streamers}/{config.get('slots_ativos', 'N/A')}")
        info.append(f"üì° *Streamers:* `{' | '.join(streamers) if streamers else 'Nenhum'}`")
        if config.get('modo_monitoramento') == 'MANUAL':
            info.append(f"  - *M√≠n. Clipes:* `{config.get('manual_min_clips', 'N/A')}`")
            info.append(f"  - *Intervalo:* `{config.get('manual_interval_sec', 'N/A')}`s")
    else:
        info.append("üì∫ *Canal:* N√£o criado")

    await update.message.reply_text("\n".join(info), parse_mode="Markdown")

async def set_plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Define ou concede um plano de assinatura a um usu√°rio."""
    if not is_usuario_admin(update.effective_user.id): return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå Uso: `/setplan <user_id> <Nome do Plano> [dias]`\nEx: `/setplan 123 Mensal Solo 30`")
        return
    
    try:
        user_id = int(context.args[0])
        # Verifica se o √∫ltimo argumento √© um n√∫mero (dias)
        if context.args[-1].isdigit() and len(context.args) > 2:
            days = int(context.args[-1])
            plan_name = " ".join(context.args[1:-1])
        else: # Se n√£o, assume dias padr√£o e o resto √© o nome do plano
            days = 31
            plan_name = " ".join(context.args[1:])
        
        if not plan_name:
             await update.message.reply_text("‚ùå Nome do plano n√£o fornecido.")
             return

        # Verifica se o usu√°rio existe
        if not buscar_usuario_por_id(user_id):
            await update.message.reply_text(f"‚ùå Usu√°rio com ID `{user_id}` n√£o encontrado. Pe√ßa para ele dar /start primeiro.")
            return

        conceder_plano_usuario(user_id, plan_name, days)
        await update.message.reply_text(f"‚úÖ Plano *{plan_name}* concedido ao usu√°rio `{user_id}` por *{days} dias*.")

    except ValueError:
        await update.message.reply_text("‚ùå ID de usu√°rio ou n√∫mero de dias inv√°lido.")
    except Exception as e:
        logger.error(f"Erro ao conceder plano para {context.args[0]}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao conceder plano: {e}")

async def add_slot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Adiciona um ou mais slots extras para um usu√°rio."""
    if not is_usuario_admin(update.effective_user.id): return

    if not context.args:
        await update.message.reply_text("‚ùå Uso: `/addslot <user_id> [quantidade]`")
        return

    try:
        user_id = int(context.args[0])
        quantidade = int(context.args[1]) if len(context.args) > 1 else 1
        if quantidade <= 0:
            await update.message.reply_text("‚ùå A quantidade deve ser um n√∫mero positivo.")
            return
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå ID de usu√°rio ou quantidade inv√°lida.")
        return

    # Verifica se o usu√°rio tem uma configura√ß√£o de canal, pois os slots s√£o armazenados l√°
    config = buscar_configuracao_canal(user_id)
    if not config:
        await update.message.reply_text(f"‚ùå N√£o √© poss√≠vel adicionar slot. O usu√°rio `{user_id}` n√£o possui um canal configurado.")
        return
    try:
        adicionar_slot_extra(user_id, quantidade)
        await update.message.reply_text(f"‚úÖ {quantidade} slot(s) extra(s) adicionado(s) com sucesso para o usu√°rio `{user_id}`.")
    except Exception as e:
        logger.error(f"Erro ao adicionar slot para {user_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao adicionar slot: {e}")

async def remove_slots_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove todos os slots extras de um usu√°rio, resetando para o valor base do plano."""
    if not is_usuario_admin(update.effective_user.id): return

    user_id = _parse_user_id(update, context)
    if not user_id: return

    try:
        remover_slots_extras(user_id)
        await update.message.reply_text(f"‚úÖ Todos os slots extras do usu√°rio `{user_id}` foram removidos com sucesso.")
    except ValueError as e: # Captura o erro espec√≠fico da fun√ß√£o do DB
        await update.message.reply_text(f"‚ùå Erro: {e}")
    except Exception as e:
        logger.error(f"Erro ao remover slots extras para {user_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao remover slots extras: {e}")

async def manage_channel_members_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Adiciona ou remove um usu√°rio de um canal de cliente."""
    if not is_usuario_admin(update.effective_user.id): return

    if len(context.args) != 3:
        await update.message.reply_text("‚ùå Uso: `/channelmembers <add|remove> <owner_user_id> <target_user_id>`")
        return

    action = context.args[0].lower()
    if action not in ['add', 'remove']:
        await update.message.reply_text("‚ùå A√ß√£o inv√°lida. Use 'add' ou 'remove'.")
        return

    try:
        owner_user_id = int(context.args[1])
        target_user_id = int(context.args[2])
    except ValueError:
        await update.message.reply_text("‚ùå IDs de usu√°rio devem ser n√∫meros.")
        return

    config = buscar_configuracao_canal(owner_user_id)
    if not config or not config.get('id_canal_telegram'):
        await update.message.reply_text(f"‚ùå O usu√°rio propriet√°rio `{owner_user_id}` n√£o possui um canal configurado.")
        return
    
    channel_id = int(config['id_canal_telegram'])
    await update.message.reply_text(f"‚è≥ Processando... A√ß√£o: {action}, Alvo: {target_user_id}, Canal de: {owner_user_id} ({channel_id})")

    try:
        if action == 'add':
            success, message = await adicionar_usuario_ao_canal(channel_id, target_user_id)
        else: # remove
            success, message = await remover_usuario_do_canal(channel_id, target_user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ Sucesso! {message}")
        else:
            await update.message.reply_text(f"‚ùå Falha! {message}")
    except Exception as e:
        logger.error(f"Erro ao gerenciar membros do canal {channel_id} para o alvo {target_user_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Ocorreu um erro inesperado: {e}")

async def set_streamers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """(Admin) Altera a lista de streamers de um cliente, substituindo a atual."""
    if not is_usuario_admin(update.effective_user.id): return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå Uso: `/setstreamers <user_id> <streamer1> [streamer2]...`\nIsso substituir√° a lista atual.")
        return

    try:
        user_id = int(context.args[0])
        new_streamers = [s.strip().replace('@', '') for s in context.args[1:]]
    except ValueError:
        await update.message.reply_text("‚ùå ID de usu√°rio inv√°lido.")
        return

    config = buscar_configuracao_canal(user_id)
    if not config:
        await update.message.reply_text(f"‚ùå O usu√°rio `{user_id}` n√£o possui um canal configurado.")
        return

    try:
        atualizar_streamers_monitorados(user_id, new_streamers)
        await update.message.reply_text(f"‚úÖ Lista de streamers do usu√°rio `{user_id}` atualizada para: `{', '.join(new_streamers)}`")
    except Exception as e:
        logger.error(f"Erro ao alterar streamers para {user_id} via admin: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao atualizar streamers: {e}")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma mensagem para todos os assinantes ativos."""
    if not is_usuario_admin(update.effective_user.id): return

    if not context.args:
        await update.message.reply_text("‚ùå Uso: `/broadcast <sua mensagem>`")
        return

    mensagem = " ".join(context.args)
    
    ids_assinantes = buscar_ids_assinantes_ativos()
    if not ids_assinantes:
        await update.message.reply_text("‚ÑπÔ∏è Nenhum assinante ativo encontrado para enviar a mensagem.")
        return

    await update.message.reply_text(f"üì¢ Iniciando envio da mensagem para {len(ids_assinantes)} assinantes...")

    sucessos = 0
    falhas = 0

    for user_id in ids_assinantes:
        try:
            await context.bot.send_message(chat_id=user_id, text=mensagem, parse_mode="Markdown")
            sucessos += 1
            await asyncio.sleep(0.1) # Pausa para n√£o sobrecarregar a API
        except telegram_error.Forbidden:
            logger.warning(f"Falha no broadcast para {user_id}: Bot foi bloqueado pelo usu√°rio.")
            falhas += 1
        except Exception as e:
            logger.error(f"Falha no broadcast para {user_id}: {e}")
            falhas += 1

    await update.message.reply_text(
        f"‚úÖ Broadcast finalizado!\n\n"
        f"- Enviado com sucesso para: {sucessos} usu√°rios.\n"
        f"- Falhas (usu√°rios que bloquearam o bot): {falhas} usu√°rios."
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Exibe estat√≠sticas gerais do bot."""
    if not is_usuario_admin(update.effective_user.id): return

    stats = obter_estatisticas_gerais()

    texto = (
        "üìä *Estat√≠sticas do Clipador*\n\n"
        f"üë• *Total de Usu√°rios:* {stats['total_usuarios']}\n"
        f"‚úÖ *Assinantes Ativos:* {stats['assinantes_ativos']}\n"
        f"üì∫ *Canais Monitorados:* {stats['canais_monitorados']}"
    )

    await update.message.reply_text(texto, parse_mode="Markdown")

async def message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma mensagem privada para um usu√°rio espec√≠fico."""
    if not is_usuario_admin(update.effective_user.id): return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå Uso: `/message <user_id> <sua mensagem>`")
        return

    try:
        user_id = int(context.args[0])
        mensagem = " ".join(context.args[1:])

        await context.bot.send_message(chat_id=user_id, text=mensagem, parse_mode="Markdown")
        await update.message.reply_text(f"‚úÖ Mensagem enviada com sucesso para o usu√°rio `{user_id}`.")

    except ValueError:
        await update.message.reply_text("‚ùå ID de usu√°rio inv√°lido.")
    except telegram_error.BadRequest as e:
        await update.message.reply_text(f"‚ùå Falha ao enviar: {e}. O usu√°rio pode n√£o ter iniciado o bot.")
    except Exception as e:
        logger.error(f"Erro ao enviar mensagem para {context.args[0]}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå Erro ao enviar mensagem: {e}")

async def channel_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Exibe estat√≠sticas detalhadas de um canal espec√≠fico."""
    if not is_usuario_admin(update.effective_user.id): return

    if not context.args:
        await update.message.reply_text("‚ùå Uso: `/channelstats <user_id>` ou `/channelstats gratuito`")
        return

    identifier = context.args[0]
    info = []

    if identifier.lower() == 'gratuito':
        info.append("üìä *Estat√≠sticas do Canal Gratuito*")
        channel_id = int(TELEGRAM_CHAT_ID)
        
        # Detalhes do canal (membros)
        detalhes = await obter_detalhes_canal(channel_id)
        info.append(f"üë• *Membros:* {detalhes['participants_count'] if detalhes else 'N/A'}")

        # Requisi√ß√µes
        requests = context.bot_data.get('free_channel_requests', 'N/A')
        info.append(f"üìà *Requisi√ß√µes (√∫ltimo ciclo):* {requests}")

        # Streamers
        streamers = context.bot_data.get('free_channel_streamers', [])
        info.append(f"üì° *Streamers Monitorados ({len(streamers)}):*")
        if streamers:
            info.append(f"`{' | '.join(streamers)}`")
        else:
            info.append("Nenhum")

    elif identifier.isdigit():
        user_id = int(identifier)
        config = buscar_configuracao_canal(user_id)
        if not config or not config.get('id_canal_telegram'):
            await update.message.reply_text(f"‚ùå Nenhuma configura√ß√£o de canal encontrada para o usu√°rio `{user_id}`.")
            return

        info.append(f"üìä *Estat√≠sticas do Canal do Usu√°rio `{user_id}`*")
        channel_id = int(config['id_canal_telegram'])

        detalhes = await obter_detalhes_canal(channel_id)
        info.append(f"üë• *Membros:* {detalhes['participants_count'] if detalhes else 'N/A'}")
        requests = context.bot_data.get(f'client_{user_id}_requests', 'N/A')
        info.append(f"üìà *Requisi√ß√µes (√∫ltimo ciclo):* {requests}")
        info.append(f"üß† *Modo:* `{config.get('modo_monitoramento', 'N/A')}`")
        streamers = [s for s in config.get('streamers_monitorados', '').split(',') if s]
        info.append(f"üì° *Streamers Monitorados ({len(streamers)}):* `{' | '.join(streamers) if streamers else 'Nenhum'}`")
        client_id = config.get('twitch_client_id', 'N/A')
        secret = config.get('twitch_client_secret', 'N/A')
        secret_masked = f"{secret[:4]}...{secret[-4:]}" if len(secret) > 8 else secret
        info.append("\n*--- Credenciais Twitch ---*")
        info.append(f"üîë *Client ID:* `{client_id}`")
        info.append(f"üîí *Client Secret:* `{secret_masked}`")

    else:
        await update.message.reply_text("‚ùå Identificador inv√°lido. Use um ID de usu√°rio ou a palavra 'gratuito'.")
        return

    await update.message.reply_text("\n".join(info), parse_mode="Markdown")